name: CI/CD

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

jobs:
#  format:
#    name: Format
#    runs-on: ubuntu-latest
#    container: cirrusci/flutter:stable
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#      - name: Check format
#        run: scripts/check_format.sh
#
#  lint:
#    name: Lint
#    runs-on: ubuntu-latest
#    container: cirrusci/flutter:stable
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#      - name: Get dependencies
#        run: flutter pub get
#      - name: Lint using flutter analyze
#        run: flutter analyze
#
#  test-flutter:
#    name: Test Flutter
#    needs: [ lint, format ]
#    runs-on: ubuntu-latest
#    container: cirrusci/flutter:stable
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#      - name: Get dependencies
#        run: flutter pub get
#      - name: Run all tests
#        run: flutter test --reporter=expanded --coverage
#      - name: Check coverage
#        run: dart scripts/check_coverage.dart coverage/lcov.info

  test-android:
    name: Test Android
#    needs: [ lint, format ]
    runs-on: ubuntu-latest
    container: cirrusci/flutter:stable
    env:
      GRADLE_VERSION: 6.7

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache Gradle
        id: cache-gradle
        uses: actions/cache@v2
        with:
          path: |
            ./example/android/ci-cache/gradle
            ./example/android/gradle/wrapper/gradle-wrapper.jar
            ./example/android/gradlew
          key: ${{ runner.os }}-gradle-${{ env.GRADLE_VERSION }}
      - run: ls
      - run: ls ./example/android/
      - run: ls ./example/android/ci-cache/gradle
      - run: ls ./example/android/gradle/wrapper/
      - name: Get dependencies
        run: flutter pub get
      - name: Setup Gradle
        if: steps.cache-gradle.outputs.cache-hit != 'true'
        working-directory: ./example/android
        run: ../../scripts/setup_gradle.sh ${{ env.GRADLE_VERSION }}
      - name: Validate Gradle
        working-directory: ./example/android
        run: ./gradlew wrapper --gradle-version ${{ env.GRADLE_VERSION }} --distribution-type all
      - name: Run all tests
        working-directory: ./example/android
        run: ./gradlew :usercentrics_sdk:test

  test-ios:
    name: Test iOS
    #    needs: [ lint, format ]
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          channel: 'stable'
      - name: Get dependencies
        run: flutter pub get
      - name: Setup Pods
        working-directory: ./example/ios
        run: pod install
      - name: Run all tests
        working-directory: ./example/ios
        run: ../../scripts/ios_unit_tests.sh

  build-android:
    if: "(github.ref != 'refs/heads/master')"
    name: Build Android
#    needs: [ test-flutter, test-android, test-ios ]
    runs-on: ubuntu-latest
    container: cirrusci/flutter:stable

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get dependencies
        run: flutter pub get
      - name: Build
        working-directory: ./example
        run: flutter build apk

#  build-ios:
#    if: "(github.ref != 'refs/heads/master')"
#    name: Build iOS
#    needs: test
#    runs-on: macos-latest
#    container: cirrusci/flutter:stable
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#      - name: Get dependencies
#        working-directory: ./example
#        run: flutter pub get
#      - name: Build
#        working-directory: ./example
#        run: flutter build ios
